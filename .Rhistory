)]
ggplot(sigEpi, aes(x=contrast,y=Est)) +
geom_point() +
geom_errorbar(aes(ymin = Lower,ymax = Upper), width=0.25) +
facet_wrap(~genes,scale="free_y") +
geom_text(aes(x = contrast, y=Upper+0.025, label = Sig)) +
theme_bw() +
theme(axis.text.x = element_text(angle=90)) +
ggtitle("Genes with at least one significant comparison.","Epidermis") +
ylab("Estimate") +xlab("")+
labs(caption = "** represents a significant comparison. A random intercept model was
fit to account for the within person correlation Laird and Ware (1982)")
# Significant Derm Genes
sigDerm <- DermPairs[OverallTest<0.05,][,Sig := fcase(
0 >= Lower & 0 <= Upper, "",
default = "**"
)]
ggplot(sigDerm, aes(x=contrast,y=Est)) +
geom_point() +
geom_errorbar(aes(ymin = Lower,ymax = Upper), width=0.25) +
facet_wrap(~genes,scale="free_y") +
geom_text(aes(x = contrast, y=Upper+0.025, label = Sig)) +
theme_bw() +
theme(axis.text.x = element_text(angle=90)) +
ggtitle("Genes with at least one significant comparison.","Dermis") +
ylab("Estimate") +xlab("") +
labs(caption = "** represents a significant comparison. A random intercept model was
fit to account for the within person correlation Laird and Ware (1982)")
# Read in analysis data
analysis <- read.csv("GeneAnalysisData.csv")
setDT(analysis) # turn data into a data table object
##################################################################
# Create gene list
##################################################################
genes<-c("CD274","CD28","CD80","CD86","CIITA","CTLA4","HAVCR2","HLA.DMA","HLA.DOA",
"HLA.DOB","HLA.DPB1","HLA.DRB1","LAG3","LGALS1","LGALS3","LGALS4","PDCD1",
"PDCD1LG2", "PVR", "TIGIT", "TNFRSF18", "TNFRSF9", "TNFSF18",  "TNFSF9"  )
#############################################################
## Make analysis data long so the genes are in the rows
#############################################################
cols <- c("SubjectID","AOIInfo","Region","SubjectIDMatched",genes)
analysisLong <- melt.data.table(analysis[,.SD,.SDcols = cols],
id.vars = c("SubjectID","AOIInfo","Region","SubjectIDMatched"),
variable.name = "genes",
value.name = "exp")
###############################################################################
## Split data into Epi and Derm
###
###. With cSCC Stroma in the Derm strata and cSCC Tumor, edge and center in the Epi strata.
################################################################################
epiDat <- analysisLong[AOIInfo == "Epi" | (Region %in% c("cSCC_Edge","cSCC_Center","cSCC_Tumor"))][,Region := fcase(
Region %in% c("cSCC_Edge","cSCC_Center","cSCC_Tumor"), "cSCC",
default = Region
)]
# Check
#table(epiDat$AOIInfo)
#table(epiDat$Region)
# Dermis
dermDat <- analysisLong[AOIInfo == "Derm" | (Region == "cSCC_Stroma")]
#table(dermDat$AOIInfo)
#table(dermDat$Region)
###############################################################################
### Create line plots for each strata without SP
###############################################################################
epiPlot <- epiDat[,.(M = mean(exp), sd = sd(exp), lower = mean(exp)-qt(0.975, df = .N - 1) *(sd(exp)/sqrt(.N)), upper= mean(exp)+qt(0.975, df = .N - 1) *(sd(exp)/sqrt(.N))), by= c("genes","Region")]
# Make region an ordered factor
epiPlot[,Region:=factor(Region,levels = c("SunProtected","SunDamaged","AKEdge","AKCenter","cSCC"))]
dermPlot <- dermDat[,.(M = mean(exp), sd = sd(exp), lower = mean(exp)-qt(0.975, df = .N - 1) *(sd(exp)/sqrt(.N)), upper= mean(exp)+qt(0.975, df = .N - 1) *(sd(exp)/sqrt(.N))), by= c("genes","Region")]
# Make region an ordered factor
dermPlot[,Region:=factor(Region,levels = c("SunProtected","SunDamaged","AKEdge","AKCenter","cSCC_Stroma"))]
# Check
#epiPlot
#dermPlot
####################################
## Epi
####################################
genes12 <- genes[1:12]
# Epi plot
ggplot(epiPlot[genes %in% genes12 & Region !="SunProtected"], aes(x=as.numeric(Region),y=M)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax=upper),width=0.25)+
facet_wrap(~genes, scales = "free_y")+
scale_x_continuous(breaks = c(2,3,4,5),labels =c("SD","AK-Edge","AK-Center","cSCC")) +
theme_bw() +
ylab("log2(CPM)") + xlab("Region") + ggtitle("Means and 95% confidence intervals accross regions","Epi set 1") +
theme(axis.text.x  = element_text(angle = 90))
ggsave("Results/Means/EpiSelectedGenesMeansBatch1.png")
genes24 <- genes[13:24]
ggplot(epiPlot[genes %in% genes24 & Region !="SunProtected"], aes(x=as.numeric(Region),y=M)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax=upper, width=0.25))+
facet_wrap(~genes, scales = "free_y")+
scale_x_continuous(breaks = c(2,3,4,5),labels =c("SD","AK-Edge","AK-Center","cSCC")) +
theme_bw() +
ylab("log2(CPM)") + xlab("Region") + ggtitle("Means and 95% confidence intervals accross regions","Epi set 2") +
theme(axis.text.x  = element_text(angle = 90))
ggsave("Results/Means/EpiSelectedGenesMeansBatch2.png")
############################
## Derm
############################
genes12 <- genes[1:12]
# Epi plot
ggplot(dermPlot[genes %in% genes12 & Region !="SunProtected"], aes(x=as.numeric(Region),y=M)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax=upper), width=0.25)+
facet_wrap(~genes, scales = "free_y")+
scale_x_continuous(breaks = c(2,3,4,5),labels =c("SD","AK-Edge","AK-Center","cSCC")) +
theme_bw() +
ylab("log2(CPM)") + xlab("Region") + ggtitle("Means and 95% confidence intervals accross regions","Derm set 1") +
theme(axis.text.x  = element_text(angle = 90))
ggsave("Results/Means/DermSelectedGenesMeansBatch1.png")
genes24 <- genes[13:24]
ggplot(epiPlot[genes %in% genes24 & Region !="SunProtected"], aes(x=as.numeric(Region),y=M)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax=upper),width=0.25)+
facet_wrap(~genes, scales = "free_y")+
scale_x_continuous(breaks = c(2,3,4,5),labels =c("SD","AK-Edge","AK-Center","cSCC")) +
theme_bw() +
ylab("log2(CPM)") + xlab("Region") + ggtitle("Means and 95% confidence intervals accross regions","Derm set 2") +
theme(axis.text.x  = element_text(angle = 90))
ggsave("Results/Means/DermSelectedGenesMeansBatch2.png")
# Read in analysis data
analysis <- read.csv("GeneAnalysisData.csv")
setDT(analysis) # turn data into a data table object
##################################################################
# Create gene list
##################################################################
genes<-c("CD274","CD28","CD80","CD86","CIITA","CTLA4","HAVCR2","HLA.DMA","HLA.DOA",
"HLA.DOB","HLA.DPB1","HLA.DRB1","LAG3","LGALS1","LGALS3","LGALS4","PDCD1",
"PDCD1LG2", "PVR", "TIGIT", "TNFRSF18", "TNFRSF9", "TNFSF18",  "TNFSF9"  )
#############################################################
## Make analysis data long so the genes are in the rows
#############################################################
cols <- c("SubjectID","AOIInfo","Region","SubjectIDMatched",genes)
analysisLong <- melt.data.table(analysis[,.SD,.SDcols = cols],
id.vars = c("SubjectID","AOIInfo","Region","SubjectIDMatched"),
variable.name = "genes",
value.name = "exp")
###############################################################################
## Split data into Epi and Derm
###
###. With cSCC Stroma in the Derm strata and cSCC Tumor, edge and center in the Epi strata.
################################################################################
epiDat <- analysisLong[AOIInfo == "Epi" | (Region %in% c("cSCC_Edge","cSCC_Center","cSCC_Tumor"))][,Region := fcase(
Region %in% c("cSCC_Edge","cSCC_Center","cSCC_Tumor"), "cSCC",
default = Region
)]
# Check
#table(epiDat$AOIInfo)
#table(epiDat$Region)
# Dermis
dermDat <- analysisLong[AOIInfo == "Derm" | (Region == "cSCC_Stroma")]
#table(dermDat$AOIInfo)
#table(dermDat$Region)
###############################################################################
### Create line plots for each strata without SP
###############################################################################
epiPlot <- epiDat[,.(M = mean(exp), sd = sd(exp), lower = mean(exp)-qt(0.975, df = .N - 1) *(sd(exp)/sqrt(.N)), upper= mean(exp)+qt(0.975, df = .N - 1) *(sd(exp)/sqrt(.N))), by= c("genes","Region")]
# Make region an ordered factor
epiPlot[,Region:=factor(Region,levels = c("SunProtected","SunDamaged","AKEdge","AKCenter","cSCC"))]
dermPlot <- dermDat[,.(M = mean(exp), sd = sd(exp), lower = mean(exp)-qt(0.975, df = .N - 1) *(sd(exp)/sqrt(.N)), upper= mean(exp)+qt(0.975, df = .N - 1) *(sd(exp)/sqrt(.N))), by= c("genes","Region")]
# Make region an ordered factor
dermPlot[,Region:=factor(Region,levels = c("SunProtected","SunDamaged","AKEdge","AKCenter","cSCC_Stroma"))]
# Check
#epiPlot
#dermPlot
####################################
## Epi
####################################
genes12 <- genes[1:12]
# Epi plot
ggplot(epiPlot[genes %in% genes12 & Region !="SunProtected"], aes(x=as.numeric(Region),y=M)) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = lower, ymax=upper),width=0.25)+
facet_wrap(~genes, scales = "free_y")+
scale_x_continuous(breaks = c(2,3,4,5),labels =c("SD","AK-Edge","AK-Center","cSCC")) +
theme_bw() +
ylab("log2(CPM)") + xlab("Region") + ggtitle("Means and 95% confidence intervals accross regions","Epi set 1") +
theme(axis.text.x  = element_text(angle = 90))
ggsave("Results/Means/EpiSelectedGenesMeansBatch1.png")
genes24 <- genes[13:24]
ggplot(epiPlot[genes %in% genes24 & Region !="SunProtected"], aes(x=as.numeric(Region),y=M)) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = lower, ymax=upper, width=0.25))+
facet_wrap(~genes, scales = "free_y")+
scale_x_continuous(breaks = c(2,3,4,5),labels =c("SD","AK-Edge","AK-Center","cSCC")) +
theme_bw() +
ylab("log2(CPM)") + xlab("Region") + ggtitle("Means and 95% confidence intervals accross regions","Epi set 2") +
theme(axis.text.x  = element_text(angle = 90))
ggsave("Results/Means/EpiSelectedGenesMeansBatch2.png")
############################
## Derm
############################
genes12 <- genes[1:12]
# Epi plot
ggplot(dermPlot[genes %in% genes12 & Region !="SunProtected"], aes(x=as.numeric(Region),y=M)) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = lower, ymax=upper), width=0.25)+
facet_wrap(~genes, scales = "free_y")+
scale_x_continuous(breaks = c(2,3,4,5),labels =c("SD","AK-Edge","AK-Center","cSCC")) +
theme_bw() +
ylab("log2(CPM)") + xlab("Region") + ggtitle("Means and 95% confidence intervals accross regions","Derm set 1") +
theme(axis.text.x  = element_text(angle = 90))
ggsave("Results/Means/DermSelectedGenesMeansBatch1.png")
genes24 <- genes[13:24]
ggplot(epiPlot[genes %in% genes24 & Region !="SunProtected"], aes(x=as.numeric(Region),y=M)) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = lower, ymax=upper),width=0.25)+
facet_wrap(~genes, scales = "free_y")+
scale_x_continuous(breaks = c(2,3,4,5),labels =c("SD","AK-Edge","AK-Center","cSCC")) +
theme_bw() +
ylab("log2(CPM)") + xlab("Region") + ggtitle("Means and 95% confidence intervals accross regions","Derm set 2") +
theme(axis.text.x  = element_text(angle = 90))
ggsave("Results/Means/DermSelectedGenesMeansBatch2.png")
# Read in analysis data
analysis <- read.csv("GeneAnalysisData.csv")
setDT(analysis) # turn data into a data table object
##################################################################
# Create gene list
##################################################################
genes<-c("CD274","CD28","CD80","CD86","CIITA","CTLA4","HAVCR2","HLA.DMA","HLA.DOA",
"HLA.DOB","HLA.DPB1","HLA.DRB1","LAG3","LGALS1","LGALS3","LGALS4","PDCD1",
"PDCD1LG2", "PVR", "TIGIT", "TNFRSF18", "TNFRSF9", "TNFSF18",  "TNFSF9"  )
#############################################################
## Make analysis data long so the genes are in the rows
#############################################################
cols <- c("SubjectID","AOIInfo","Region","SubjectIDMatched",genes)
analysisLong <- melt.data.table(analysis[,.SD,.SDcols = cols],
id.vars = c("SubjectID","AOIInfo","Region","SubjectIDMatched"),
variable.name = "genes",
value.name = "exp")
###############################################################################
## Split data into Epi and Derm
###
###. With cSCC Stroma in the Derm strata and cSCC Tumor, edge and center in the Epi strata.
################################################################################
epiDat <- analysisLong[AOIInfo == "Epi" | (Region %in% c("cSCC_Edge","cSCC_Center","cSCC_Tumor"))][,Region := fcase(
Region %in% c("cSCC_Edge","cSCC_Center","cSCC_Tumor"), "cSCC",
default = Region
)]
# Check
#table(epiDat$AOIInfo)
#table(epiDat$Region)
# Dermis
dermDat <- analysisLong[AOIInfo == "Derm" | (Region == "cSCC_Stroma")]
#table(dermDat$AOIInfo)
#table(dermDat$Region)
###############################################################################
### Create line plots for each strata without SP
###############################################################################
epiPlot <- epiDat[,.(M = mean(exp), sd = sd(exp), lower = mean(exp)-qt(0.975, df = .N - 1) *(sd(exp)/sqrt(.N)), upper= mean(exp)+qt(0.975, df = .N - 1) *(sd(exp)/sqrt(.N))), by= c("genes","Region")]
# Make region an ordered factor
epiPlot[,Region:=factor(Region,levels = c("SunProtected","SunDamaged","AKEdge","AKCenter","cSCC"))]
dermPlot <- dermDat[,.(M = mean(exp), sd = sd(exp), lower = mean(exp)-qt(0.975, df = .N - 1) *(sd(exp)/sqrt(.N)), upper= mean(exp)+qt(0.975, df = .N - 1) *(sd(exp)/sqrt(.N))), by= c("genes","Region")]
# Make region an ordered factor
dermPlot[,Region:=factor(Region,levels = c("SunProtected","SunDamaged","AKEdge","AKCenter","cSCC_Stroma"))]
# Check
#epiPlot
#dermPlot
####################################
## Epi
####################################
genes12 <- genes[1:12]
# Epi plot
ggplot(epiPlot[genes %in% genes12 & Region !="SunProtected"], aes(x=as.numeric(Region),y=M)) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = lower, ymax=upper),width=0.25)+
facet_wrap(~genes, scales = "free_y")+
scale_x_continuous(breaks = c(2,3,4,5),labels =c("SD","AK-Edge","AK-Center","cSCC")) +
theme_bw() +
ylab("log2(CPM)") + xlab("Region") + ggtitle("Means and 95% confidence intervals accross regions","Epi set 1") +
theme(axis.text.x  = element_text(angle = 90))
ggsave("Results/Means/EpiSelectedGenesMeansBatch1.png")
genes24 <- genes[13:24]
ggplot(epiPlot[genes %in% genes24 & Region !="SunProtected"], aes(x=as.numeric(Region),y=M)) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = lower, ymax=upper, width=0.25))+
facet_wrap(~genes, scales = "free_y")+
scale_x_continuous(breaks = c(2,3,4,5),labels =c("SD","AK-Edge","AK-Center","cSCC")) +
theme_bw() +
ylab("log2(CPM)") + xlab("Region") + ggtitle("Means and 95% confidence intervals accross regions","Epi set 2") +
theme(axis.text.x  = element_text(angle = 90))
ggsave("Results/Means/EpiSelectedGenesMeansBatch2.png")
############################
## Derm
############################
genes12 <- genes[1:12]
# Epi plot
ggplot(dermPlot[genes %in% genes12 & Region !="SunProtected"], aes(x=as.numeric(Region),y=M)) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = lower, ymax=upper), width=0.25)+
facet_wrap(~genes, scales = "free_y")+
scale_x_continuous(breaks = c(2,3,4,5),labels =c("SD","AK-Edge","AK-Center","cSCC")) +
theme_bw() +
ylab("log2(CPM)") + xlab("Region") + ggtitle("Means and 95% confidence intervals accross regions","Derm set 1") +
theme(axis.text.x  = element_text(angle = 90))
ggsave("Results/Means/DermSelectedGenesMeansBatch1.png")
genes24 <- genes[13:24]
ggplot(dermPlot[genes %in% genes24 & Region !="SunProtected"], aes(x=as.numeric(Region),y=M)) +
geom_point() +
geom_line() +
geom_errorbar(aes(ymin = lower, ymax=upper),width=0.25)+
facet_wrap(~genes, scales = "free_y")+
scale_x_continuous(breaks = c(2,3,4,5),labels =c("SD","AK-Edge","AK-Center","cSCC")) +
theme_bw() +
ylab("log2(CPM)") + xlab("Region") + ggtitle("Means and 95% confidence intervals accross regions","Derm set 2") +
theme(axis.text.x  = element_text(angle = 90))
ggsave("Results/Means/DermSelectedGenesMeansBatch2.png")
######################################
##  Load Normalized Data
######################################
data_path = data_path = "https://data.cyverse.org/dav-anon/iplant/projects/SkinPPG/H202SC24094550/Nanostring/Processed/StandardizedNanostringData.rds"
# You may need to edit this code to update path
normalizedData <- readRDS(data_path)
######################################
##  Load Normalized Data
######################################
# This is a link to the processed data on cyverse
data_path = data_path = "https://data.cyverse.org/dav-anon/iplant/projects/SkinPPG/H202SC24094550/Nanostring/Processed/StandardizedNanostringData.rds"
# You may need to edit this code to update path
normalizedData <- readRDS(data_path)
# You may need to edit this code to update path
normalizedData <- readRDS(url(data_path))
# Read in analysis data
analysis <- fread("GeneAnalysisData.csv")
# Get packages
packages <- c("NanoStringNCTools",
"GeomxTools",
"GeoMxWorkflows",
"knitr",
"kableExtra",
"magrittr",
"ggplot2",
"plotly",
"patchwork",
"data.table",
"geepack",
"nlme",
"emmeans")
for (pkg in packages) {
# If package is not installed then install it.
if(!(pkg %in% installed.packages()[,1])){install.packages(pkg)}
# Load package.
library(pkg,character.only = TRUE)
}
for (i in dir("R")) {
source(paste0("R/",i))
}
# Read in analysis data
analysis <- fread("GeneAnalysisData.csv")
setDT(analysis) # turn data into a data table object
##################################################################
# Create gene list
##################################################################
genes<-c("CD274","CD28","CD80","CD86","CIITA","CTLA4","HAVCR2","HLA.DMA","HLA.DOA",
"HLA.DOB","HLA.DPB1","HLA.DRB1","LAG3","LGALS1","LGALS3","LGALS4","PDCD1",
"PDCD1LG2", "PVR", "TIGIT", "TNFRSF18", "TNFRSF9", "TNFSF18",  "TNFSF9"  )
#############################################################
## Make analysis data long so the genes are in the rows
#############################################################
cols <- c("SubjectID","AOIInfo","Region","SubjectIDMatched",genes)
analysisLong <- melt.data.table(analysis[,.SD,.SDcols = cols],
id.vars = c("SubjectID","AOIInfo","Region","SubjectIDMatched"),
variable.name = "genes",
value.name = "exp")
##################################################################
# Create gene list
##################################################################
genes<-c("CD274","CD28","CD80","CD86","CIITA","CTLA4","HAVCR2","HLA-DMA","HLA-DOA",
"HLA-DOB","HLA-DPB1","HLA-DRB1","LAG3","LGALS1","LGALS3","LGALS4","PDCD1",
"PDCD1LG2", "PVR", "TIGIT", "TNFRSF18", "TNFRSF9", "TNFSF18",  "TNFSF9"  )
#############################################################
## Make analysis data long so the genes are in the rows
#############################################################
cols <- c("SubjectID","AOIInfo","Region","SubjectIDMatched",genes)
analysisLong <- melt.data.table(analysis[,.SD,.SDcols = cols],
id.vars = c("SubjectID","AOIInfo","Region","SubjectIDMatched"),
variable.name = "genes",
value.name = "exp")
####################################################################
## This chunk is intendend to create the geneAnalysisData.csv from the StandardizedNanostringData.rds
## Nanostring object that contains the phenotype information, gene annotations,
## and the Raw reads and the CPM standardized reads for each sample.
##
## This chunk is not nessisary to run if the GeneAnalysisData.csv has
## already been created.
###################################################################
######################################
##  Load Normalized Data
######################################
# This is a link to the processed data on cyverse
data_path = data_path = "https://data.cyverse.org/dav-anon/iplant/projects/SkinPPG/H202SC24094550/Nanostring/Processed/StandardizedNanostringData.rds"
# You may need to edit this code to update path
normalizedData <- readRDS(url(data_path))
##########################################
## Pull use the log2(CPM) expression data
##########################################
# Get the assay data for the modeling CPM
assay <- data.table(t(assayDataElement(normalizedData, elt = "CPM")), keep.rownames = TRUE)
# Check 2^x for each row should give us 1 million
#table(round(rowSums(2^assay[,-'rn']),6))
#dim(assay)
##########################################
##  Pull meta data nanostring data and add the
##. Ordinal region variable
##.   SP =0
##.   SD = 1
##.   AK edge = 2
##.   AK center = 3
##########################################
metaData <- data.table(normalizedData@phenoData@data[,c("SubjectID","AOIInfo","Region","Roi","Plate")], keep.rownames = TRUE)
# Add ordinal variable
metaData[,RegionOrdinal := fcase(
Region == "SunProtected", 0,
Region == "SunDamaged",1,
Region == "AKEdge", 2,
Region == "AKCenter",3
)]
# Compare plate 5 and 14 Subjects 200016 and 200018 had samples re
#plate5 <- metaData[Plate=="Skin5"]
#plate14 <- metaData[Plate=="Skin14"]
#table(plate5$SubjectID)
#table(plate14$SubjectID)
# SubjectID 200016 had AK edge and AK center reran
#subject16 <- metaData[SubjectID==200016]
#table(subject16$Plate,subject16$Region,subject16$AOIInfo)
#subject18 <- metaData[SubjectID==200018]
#table(subject18$Plate,subject18$Region,subject18$AOIInfo)
#table(metaData$Region, metaData$RegionOrdinal)
#class(metaData$RegionOrdinal)
#######################################################
## For subjectIDs 200016 and 200018, regions AKEdge
## and AK Center were ran on plate 5 and then again
##. on plate 14. This means the samples were
## ran twice. We will remove the duplicated samples
## From plate 5 from the down stream analysis
########################################################
# Get the sample names for the duplicated samples
duplicatedSamps <- metaData[(SubjectID %in% c(200016,200018)) &
grepl("AK",Region) &
Plate=="Skin5"]
# Subset the phenotype data to exclude the duplicated samples
metaData <- metaData[!(rn %in% duplicatedSamps$rn)]
##############################################################
##
##. There are 3 subjects with matched SP and cSCC samples
##. However, the subject IDs are different. We will convert
##. The cSCC subjectIDs to match the SP IDs. See note above.
##
## | SP through AK Subject ID | cSCC Subject ID |
# |--------------------------|-----------------|
# | 300103                   | 101123          |
# | 300108                   | 101152          |
##############################################################
# Make sure all of the ids are in the meta data
ids <- c("300103","300108","101123","101152")
metaData[, SubjectIDMatched := ifelse(SubjectID=="101123","300103",
ifelse(SubjectID=="101152","300108",
SubjectID))]
# metaData[grepl("300103",SubjectIDMatched),.(SubjectID,SubjectIDMatched,AOIInfo)]
# metaData[grepl("300108",SubjectIDMatched),.(SubjectID,SubjectIDMatched,AOIInfo)]
############################################
## Merge the assay data and metaData into
## one analysis dataset
############################################
AnalysisData <- merge(metaData,assay,by='rn')
# Change the rn column to sample_ID
setnames(AnalysisData, old = 'rn', new = "SampleID")
##############################################
## Create sample distribution table
## We are splitting the tables up to make the tables
## easier to read in the html file.
###############################################
# Gets the number of samples for each participant grouped by Region and AOI
dist <- AnalysisData[,.(N= .N), by=.(SubjectIDMatched,Region,AOIInfo)
][,RegionAOI :=paste0(Region," (",AOIInfo,")")]
# filter for Non cSCC samples
options(knitr.kable.NA = '')
tableNoncSCC <- dcast.data.table(SubjectIDMatched~RegionAOI, value.var = "N", data=dist[AOIInfo!="cSCC"])
# Add row totals
tableNoncSCC[,Total:=rowSums(.SD,na.rm = T), .SDcols = is.numeric]
# Generate table
rbind(tableNoncSCC,
as.list(c("Total",colSums(tableNoncSCC[,-1], na.rm = T))),use.names=F)%>%
kbl(caption = "Sample distribution for non cSCC samples") %>%
kable_classic() %>%
scroll_box(width = "100%", height = "400px")
# Show cSCC samples
tablecSCC<- dcast.data.table(SubjectIDMatched~RegionAOI, value.var = "N", data=dist[AOIInfo=="cSCC"])
# Add row totals
tablecSCC[,Total:=rowSums(.SD,na.rm = T), .SDcols = is.numeric]
rbind(tablecSCC,
as.list(c("Total",colSums(tablecSCC[,-1], na.rm = T))),use.names=F)%>%
kbl(caption = "Sample distribution for non cSCC samples") %>%
kable_classic() %>%
scroll_box(width = "100%", height = "400px")
#names(AnalysisData)[1:10]
##############################################################################
# Save analysis data
###############################################################################
saveRDS(AnalysisData , "GeneAnalysisData.RDS")
# Read in analysis data
analysis <- readRDS("GeneAnalysisData.csv")
# Read in analysis data
analysis <- readRDS("GeneAnalysisData.RDS")
